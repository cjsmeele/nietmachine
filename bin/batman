#!/usr/bin/env perl

# Copyright (c) 2016 Chris Smeele
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use 5.12.0;
use warnings;
use autodie qw/ open opendir /;

use List::Util qw/ reduce /;
use IO::Select;

$0 = "batman";

# Hash to store PIDs of piped processes we depend on.
my %children;

# Pipe handles.
my $moniek;

my $select;

sub set_handlers {
    $SIG{INT}  = $SIG{TERM} = $SIG{HUP} = $SIG{PIPE} = \&cleanup;
    $SIG{CHLD} = "IGNORE";
}
sub unset_handlers {
    $SIG{INT}  = $SIG{TERM} = $SIG{HUP} = "DEFAULT";
    $SIG{PIPE} = "IGNORE";
}

sub init {
    set_handlers;

    %children = (
        moniek_pid => open($moniek, "-|", "moniek", "power"),
    );
    $moniek->autoflush(1);
    $select = IO::Select->new($moniek);
}

sub cleanup {
    my $sig  = shift // '';
    my $soft = shift // 0;

    return if $sig eq 'CHLD'
          and kill(ZERO => values %children) == values %children;

    # Kill any remaining children.
    kill ZERO => $_ and kill HUP => $_
        for (values %children);

    close $moniek if defined $moniek;

    unless ($soft) {
        exit;
    }
}

sub warn_bat {
    my $left = shift;
    system "notify-send",
        -u => "critical",
        "Batterij bijna leeg",
        sprintf "ðŸ”‹ %% %.1f", $left * 100;
}

init;

my $warned_on_this_discharge;

outer: for (;;) {

    foreach my $fh ($select->can_read(1.0)) {
        if ($fh == $moniek) {
            my $read = sysread $fh, my $input, 4*1024;
            die if $read == 4*1024;

            last outer unless $read;

            for (split /\n/, $input) {
                my %moniek = map { my ($k,$v) = split /=/; $k => 0+$v } split /:/;
                if ($moniek{acad}) {
                    $warned_on_this_discharge = 0;
                } else {
                    unless ($warned_on_this_discharge) {
                        my @batteries = map { $moniek{$_} } grep /^bat\d*$/, keys %moniek;
                        my $bat_avg = (reduce{ $a + $b } @batteries) / @batteries;
                        if ($bat_avg <= 0.12) {
                            warn_bat $bat_avg;
                            $warned_on_this_discharge = 1;
                        }
                    }
                }
            }
        }
    }
}

cleanup;
