#!/usr/bin/env perl

# Copyright (c) 2016, 2017 Chris Smeele
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use 5.12.0;
use warnings;
use autodie qw/ open /;

use List::Util qw/ reduce /;
use IO::Select;
use POSIX qw/ strftime /;

# Allow for easy pkill-ing
$0 = "barteld";

my $wm_padding = 0;

my $enabled = 0;

# Hash to store PIDs of piped processes we depend on.
my %children;

# Pipe handles.
my $wm_feed;
my $moniek;
my $panel;

my $select;

my %report;
my @monitors;
my $focused_monitor;

my %moniek;

sub set_handlers {
    $SIG{INT}  = $SIG{TERM} = $SIG{HUP} = $SIG{PIPE} = $SIG{CHLD} = \&cleanup;
    $SIG{USR1} = \&reload;
    $SIG{USR2} = \&toggle;
}
sub unset_handlers {
    $SIG{INT}  = $SIG{TERM} = $SIG{HUP} = "DEFAULT";
    $SIG{PIPE} = "IGNORE";
    $SIG{CHLD} = "IGNORE";
}

# My List::MoreUtils is too old for zip6 apparently.
sub zip {
    my @r;
    for (my $i = 0;; $i++) {
        last unless grep { $i < @$_ } @_;
        push @r, [map { $i < @$_ ? $_->[$i] : undef } @_];
    }
    @r
}

sub refresh_monitors {
    @monitors = map {id   => $_->[0] =~ s/\n//r,
                     name => $_->[1] =~ s/\n//r},
                zip [`bspc query -M`],
                    [`bspc query -M --names`];
}

sub init {
    set_handlers;

    %children = (
        feed_pid   => open($wm_feed, "-|", "bspc",
            subscribe => "report", "monitor",
        ),
        moniek_pid => open($moniek, "-|", "moniek"),
        panel_pid  => open($panel,  "|-", "lemonbar",
            -a => 20,
            -B => "#0c0c0c",
            -F => "#b7b7b7",
            -g => "x13",
            -f =>  "PxPlus IBM EGA8:pixelsize=16:antialias=false:hinting=false",
            -f => "Monospace:bold:pixelsize=16",
            -f =>      "Mona:bold:pixelsize=16",
            -o => -1,
            #'-b'
        ),
    );

    system "bspc", config => top_padding => ($wm_padding = 13);

    $wm_feed->autoflush(1); #binmode $wm_feed, ":encoding(utf8)";
    $moniek->autoflush(1);  #binmode $moniek,  ":encoding(utf8)";
    $panel->autoflush(1);   #binmode $panel,   ":encoding(utf8)";

    $select = IO::Select->new($wm_feed, $moniek);

    # Fill initial monitor list.
    refresh_monitors;

    $enabled = 1;
}

sub reload {
    say STDERR "Reloading $0";

    sleep (shift) if $_[0] =~ /^\d+$/;

    unset_handlers;
    cleanup(undef, "soft");
    init;
}

sub toggle {
    $enabled = !$enabled;
    unless ($enabled) {
        unset_handlers;
        cleanup(undef, "soft");
        system "bspc", config => top_padding => ($wm_padding = 0)
            if $wm_padding;
    } else {
        init;
    }
}

sub cleanup {
    my $sig  = shift // '';
    my $soft = shift // 0;

    # Ignore the death of a child if it's not one of our long-running pipes.
    return if $sig eq 'CHLD'
          and kill(ZERO => values %children) == values %children;

    # Kill any remaining children.
    kill ZERO => $_ and kill HUP => $_
        for (values %children);

    close $wm_feed if defined $wm_feed;
    close $panel   if defined $panel;
    close $moniek  if defined $moniek;

    unless ($soft) {
        system "bspc", config => top_padding => ($wm_padding = 0)
            if $wm_padding;
        exit;
    }
}

sub parse_report {

    local $_ = shift;
    s/^W//;

    my %info = (
        monitors         => {},
        have_active_node => 0,
    );
    my $monitor;

    #say STDERR $_;
    foreach (split /:/) {
        if (/^([Mm])(.+)/i) {
            $info{monitors}->{$monitor->{name}} = $monitor
                if defined $monitor;

            $monitor = {
                name   => $2,
                focus  => ($1 eq 'M'),
                desks  => [],
                layout => undef,
            };
        } elsif (/^([ufo])(.+)/i) {
            push @{$monitor->{desks}}, {
                name   => $2,
                focus  => ($1 eq uc $1),
                urgent => (lc $1 eq 'u'),
                dirty  => (lc $1 eq 'u' or lc $1 eq 'o'),
            };
        } elsif (/^L([TM])/) {
            $monitor->{layout} = $1;
        } elsif (/^T([TFP])/) {
            $info{have_active_node} = 1;
        }
    }

    $info{monitors}->{$monitor->{name}} = $monitor
        if defined $monitor;

    %report = %info;
}

sub parse_monitor {
    local $_ = shift;

    refresh_monitors;
}

sub parse_moniek {
    local $_ = shift;

    %moniek = map { my ($k,$v) = split /=/; $k => $v } split /:/;
}

sub snackbar {
    my $color = shift;
    my $ratio = shift;

    #my @bars = qw( ▁ ▂ ▃ ▄ ▅ ▆ ▇ █ );
    my @bars = (' ', qw( ▁ ▄ ▄ █ █ ));
    my %ranges = (
        critical => {
            # 0 => "#ff0000", # 0 to 12%
            #12 => "#f0b000",
            #20 => "#d0c000",
            #32 => "#a0d000",
            #70 => "#70d000", # 70% and above.
             0 => "#ff0000",
            14 => "-",
        },
    );

    return sprintf "%%{B-}%%{F%s}%s%%{F-}%%{B-}",
        (exists $ranges{$color})
            ? sub {
                for (reverse sort keys %{$ranges{$color}}) {
                    return $ranges{$color}->{$_} if $ratio*100 >= $_;
                }
                return "-";
              }->()
            #: $color,
            : '-',
        $bars[$ratio * $#bars + 0.5];
}

sub make_bar {
    my ($mon) = @_;

    my $bar = "%{l}";

    if (0) {
        # Per-monitor desk list (disabled).
        foreach my $desk (@{$mon->{desks}}) {
            if ($desk->{urgent}) {
                $bar .= "%{B#c00}%{F#fff}";
            } elsif ($desk->{focus}) {
                $bar .= $mon->{focus}
                    ? "%{B#2ab9b9}"
                    : "%{B#444}";
                $bar .= $desk->{dirty}
                    ? "%{F#000}"
                    : "%{F#fff}";
            } else {
                $bar .= $desk->{dirty}
                    ? "%{F-}"
                    : "%{F#aaa}";
            }

            $bar .= " $desk->{name} ";
            $bar .= "%{B-}%{F-}";
        }
        $bar .= "%{c}";
    } else {
        # Short current-desk indicator.
        $bar .= $mon->{layout} eq "M" ? "↑" : " ";
        my @focused_is;
        $mon->{desks}->[$_]->{focus} && push @focused_is, $_+1
            for 0..$#{$mon->{desks}};
        $bar .= join ',', @focused_is;
        $bar .= " %{F-}%{B-}";
    }

    my $title_len = 0;

    # Text only for the focused monitor.
    if ($mon->{focus}) {
        # Focused window title.
        if ($report{have_active_node}) {
            my $title = (`xtitle -t 80` =~ s/\s*\n$//r =~ s/^\s*//r);
            $bar .= " %{F#ffffff}$title%{F-} " if length $title;

            $title_len = length $title;
        }

        $bar .= "%{r} ";

        # Bar-shaped indicators.
        my $indicators;

        #$indicators .= (snackbar "#00b0d0",  $moniek{cpu}) if exists $moniek{cpu};
        $indicators .= (snackbar "#00b0d0",  $moniek{$_})  for sort grep /cpu\d+/,   keys %moniek;
        $indicators .= (snackbar "#e0d000",  $moniek{mem}) if exists $moniek{mem};
        $indicators .= (snackbar "critical", $moniek{$_})  for sort grep /^bat\d*$/, keys %moniek;

        $bar .= "$indicators " if defined $indicators;

        # Status icons.
        my $statuses;

        # - battery

        my $bat = reduce { $a + $b } map { $moniek{$_} } grep /^bat\d*$/, keys %moniek;

        if (defined $bat and $bat <= 0.12
            and (not exists($moniek{acad}) or not $moniek{acad})) {
            $statuses .= "%{B#f00}%{F#fff} ACCU " . int($bat * 100) . " % %{F-}%{B-} ";
        } elsif (exists($moniek{acad}) and $moniek{acad}) {
            $statuses .= "Ė";
        }

        $statuses .= '¥' if grep /^ip_addr_wlan/, keys %moniek;
        $statuses .= 'ē' if grep /^ip_addr_eth/,  keys %moniek;

        # - music

        if (!system("mpc | grep -q playing")) {
            $statuses .= "♫"; # ♫
        }

        $bar .= "$statuses " if defined $statuses;

        # Clock.

        $bar .= " %{F-}%{B-}";

        my $fcolor = "#ffffff";
        my $fcolor2 = "-";
        $bar .= strftime " wk %-V, %a %%{F$fcolor}%-d%%{F$fcolor2} %b %Y %%{F$fcolor}%-H%%{F$fcolor2}:%%{F$fcolor}%M ", localtime;
    }

    $bar .= "%{B-}%{F-}";

    return $bar;
}

init;

outer: for (;;) {
    unless ($enabled) {
        sleep 1;
        next;
    }
    foreach my $fh ($select->can_read(0.5)) {
        if ($fh == $wm_feed) {
            my $read = sysread $fh, my $input, 4*1024;
            reload 2 if $read == 4*1024;

            last outer unless $read;

            for (split /\n/, $input) {
                if (/^W/) {
                    parse_report $_;
                } elsif (/^monitor_/) {
                    parse_monitor $_;
                } else {
                    say "WHAT: $_";
                }
            }
        } elsif ($fh == $moniek) {
            my $read = sysread $fh, my $input, 4*1024;
            reload 2 if $read == 4*1024;

            last outer unless $read;
            for (split /\n/, $input) {
                parse_moniek $_;
            }
        }
    }

    #use Data::Dump; dd \%report;

    if (keys %report) {
        my @m = map { $_->{name} } @monitors;
        print $panel "%{Sf}";
        foreach my $mon (@{$report{monitors}}{@m}) {
            print $panel make_bar($mon);
        } continue {
            print $panel "%{S+}";
        }
    }
    print $panel "\n";
}

cleanup;
